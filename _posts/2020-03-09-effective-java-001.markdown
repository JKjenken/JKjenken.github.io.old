---
layout:     post
title:      "Effective-java-3rd"
subtitle:   " 01 - 考虑使用静态工厂方法替代构造方法 "
date:       2020-03-09 14:00:00
author:     "linjiankai"
header-img: "img/post-bg-effective-java-3rd.png"
catalog: true
tags:
    - 学习
    - effective-java
---
一个类允许客户端获取其实例的传统方式是提供一个公共构造方法。除此之外，还有另外一种方法，提供一个公共静态工厂方法 —— 一个返回类实例的静态方法。
```java
public static Boolean valueOf(boolean b) {
  return b ? Boolean.TRUE : Boolean.FALSE;
}
```
## 静态工厂方法的优点

* 有对应的方法名
    - 可以用来描述被返回的对象, 在类中似乎需要具有相同签名的多个构造
方法的情况下，用静态工厂方法替换构造方法。
* 不需要每次调用时都创建一个新对象
    - 允许使用预先构建的实例，或者在构造时缓存实例，并反复分配它们以避免创建不必要的重复对象。
    - 让类在任何时候都能对实例保持严格的控制。
* 可以返回其返回类型的任何子类型的对象
    - 可以返回对象而不需要公开它的类，隐藏实现类。
    - 将接口所涉及到的静态方法的大部分实现代码放在单独的包私有类中仍然是必要的（ Java8要求所有接口的静态成员都是公共的。Java 9 允许私有静态方法，但静态字段和静态成员类仍然需要公开。）
* 返回对象的类可以根据输入参数的不同而不同
* 在编写包含该方法的类时，返回的对象的类不需要存在
    - 例如服务提供者框架的基础,客户端获取服务实例时，允许客户指定选择实现的标准，服务端可以返回一个默认实现的实例，或者允许客户端遍历可用的实现

## 静态工厂方法的局限性
* 没有公共或受保护构造方法的类不能被子类化
    - 鼓励程序员使用组合而不是继承
* 静态工厂方法标注不够明确（相比构造函数而言），可以通过规范命名进行弥补
    - from/of/valueOf/instance/create/getType/newType/type
